version: '3.8'
services:
  csweb-app:
    container_name: csweb-app
    build:
      context: .
      dockerfile: Dockerfile-csweb-app
      args:
        CSWEB_APP_DIR: ${CSWEB_APP_DIR}
        SHARED_DIR: ${SHARED_DIR}
    environment:
      FLASK_APP: ${CSWEB_FLASK_APP}
      FLASK_ENV: ${CSWEB_FLASK_ENV}
      FLASK_DEBUG: ${CSWEB_FLASK_DEBUG}
      APP_PORT: ${CSWEB_APP_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      DB_HOST: ${DB_HOST}
    restart: unless-stopped
    tty: true
    working_dir: /app
    ports:
      - "${CSWEB_APP_PORT}:${CSWEB_APP_PORT}"
    volumes:
      - type: bind
        source: ${CSWEB_APP_DIR}/application
        target: /app/application
      - type: volume
        source: shared_model
        target: /app/application/models
    depends_on:
      - mysql-db
    networks:
      default:
        aliases:
          - ${CSWEB_APP_HOST}

  csweb-nginx:
    container_name: csweb-nginx
    build:
      context: .
      dockerfile: Dockerfile-csweb-nginx
      args:
        CSWEB_NGINX_DIR: ${CSWEB_NGINX_DIR}
    environment:
      APP_HOST: ${CSWEB_APP_HOST}
      APP_PORT: ${CSWEB_APP_PORT}
    restart: unless-stopped
    tty: true
    working_dir: /app
    ports:
      - "80:80"
    depends_on:
      - csweb-app
    networks:
      default:
        aliases:
          - csweb-nginx

  admweb-app:
    container_name: admweb-app
    build:
      context: .
      dockerfile: Dockerfile-admweb-app
      args:
        ADMWEB_APP_DIR: ${ADMWEB_APP_DIR}
        SHARED_DIR: ${SHARED_DIR}
        MIGRATIONS_DIR: ${MIGRATIONS_DIR}
    environment:
      FLASK_APP: ${ADMWEB_FLASK_APP}
      FLASK_ENV: ${ADMWEB_FLASK_ENV}
      FLASK_DEBUG: ${ADMWEB_FLASK_DEBUG}
      APP_PORT: ${ADMWEB_APP_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_PORT: ${DB_PORT}
      DB_HOST: ${DB_HOST}
    restart: unless-stopped
    tty: true
    working_dir: /app
    ports:
      - "${ADMWEB_APP_PORT}:${ADMWEB_APP_PORT}"
    volumes:
      - type: bind
        source: ${ADMWEB_APP_DIR}/application
        target: /app/application
      - type: volume
        source: shared_model
        target: /app/application/models
      - type: bind
        source: ${MIGRATIONS_DIR}
        target: /app/migrations
    depends_on:
      - mysql-db
    networks:
      default:
        aliases:
          - ${ADMWEB_APP_HOST}

  admweb-nginx:
    container_name: admweb-nginx
    build:
      context: .
      dockerfile: Dockerfile-admweb-nginx
      args:
        ADMWEB_NGINX_DIR: ${ADMWEB_NGINX_DIR}
    environment:
      APP_HOST: ${ADMWEB_APP_HOST}
      APP_PORT: ${ADMWEB_APP_PORT}
    restart: unless-stopped
    tty: true
    working_dir: /app
    ports:
      - "8080:80"
    depends_on:
      - admweb-app
    networks:
      default:
        aliases:
          - admweb-nginx
  
  mysql-db:
    container_name: mysql-db
    build:
      context: ./mysql
      dockerfile: Dockerfile
    environment:
      - MYSQL_ROOT_PASSWORD
      - MYSQL_USER=$DB_USER
      - MYSQL_PASSWORD=$DB_PASSWORD
      - MYSQL_DATABASE=$DB_NAME
    volumes:
      - type: bind
        source: ./.volumes/mysql
        target: /var/lib/mysql
      - type: bind
        source:  ./.logs/mysql
        target: /var/log/mysql
    ports:
      - 3306:3306
    networks:
      default:
        aliases:
          - mysql-db
  
networks:
  default:
    driver: bridge

volumes:
  shared_model:
    driver_opts:
      type: none
      device: ${SHARED_DIR}/models
      o: bind
